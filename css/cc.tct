import React, { Component } from 'react';
import ChatBot from 'react-simple-chatbot';
import ReactGA from 'react-ga';

class SupportBot extends Component {
  constructor(props) {
    super(props);

    ReactGA.initialize('YOUR_GOOGLE_ANALYTICS_TRACKING_ID');

    this.state = {
      chatbot: null,
      queryClicks: {},
      steps: [
        {
          id: '1',
          message: 'Welcome to our support bot! How can I assist you today?',
          trigger: 'searchKeyword'
        },
        {
          id: 'searchKeyword',
          message: 'Please enter a keyword related to your question:',
          trigger: 'searchResult'
        },
        {
          id: 'searchResult',
          user: true,
          trigger: 'displayResult'
        },
        {
          id: 'displayResult',
          component: <SearchResult handleButtonClick={this.handleButtonClick} />,
          waitAction: true,
          trigger: 'menuOrSearchOrEnd'
        },
        {
          id: 'menuOrSearchOrEnd',
          options: [
            // { value: 'menu', label: 'Back to Menu', trigger: 'menu' },
            { value: 'search', label: 'Search Other Keyword', trigger: 'searchKeyword' },
            { value: 'end', label: 'End Conversation', trigger: 'end' }
          ]
        },
        {
          id: 'menu',
          options: []
        },
        {
          id: 'product',
          message: 'Our product is a chatbot builder that allows you to easily create conversational interfaces for your website or application.',
          trigger: 'menuOrSearchOrEnd'
        },
        {
          id: 'gettingStarted',
          message: 'To get started, simply sign up for an account on our website and start building your chatbot!',
          trigger: 'menuOrSearchOrEnd'
        },
        {
          id: 'contactSupport',
          message: 'You can contact our support team by emailing or by filling out the contact form on our website.',
          trigger: 'menuOrSearchOrEnd'
        },
        {
          id: 'end',
          message: 'Thank you for using our support bot. Have a great day!',
          end: true
        }
      ]
    };
  }

  componentDidMount() {
    this.setState({ chatbot: this.chatbot });
  }

  handleButtonClick = (trigger) => {
    const { queryClicks } = this.state;
    const menuStep = this.state.steps.find((step) => step.id === 'menu');
    menuStep.trigger = 'displayResult';

    if (queryClicks.hasOwnProperty(trigger)) {
      queryClicks[trigger] += 1;
    } else {
      queryClicks[trigger] = 1;
    }

    ReactGA.event({
      category: 'Query Click',
      action: trigger,
      label: `Click Count: ${queryClicks[trigger]}`
    });

    this.setState({ queryClicks }, () => {
      if (trigger === 'menu') {
        this.setState({ steps: [...this.state.steps] }, () => {
          this.state.chatbot.triggerNextStep({ value: trigger, trigger });
        });
      } else if (trigger === 'search') {
        this.setState({ steps: [...this.state.steps] }, () => {
          this.state.chatbot.triggerNextStep({ value: trigger, trigger: 'searchKeyword' });
        });
      } else {
        const noSearchFoundStep = {
          id: 'noSearchFound',
          message: 'No matching results found for your search.',
          trigger: 'menuOrSearchOrEnd'
        };

        this.setState(
          { steps: [...this.state.steps, noSearchFoundStep] },
          () => {
            this.state.chatbot.triggerNextStep({ value: trigger, trigger });
          }
        );
      }
    });
  };

  render() {
    const { steps } = this.state;

    const updatedSteps = steps.map((step) => {
      if (step.id === 'displayResult') {
        return {
          ...step,
          component: (
            <SearchResult
              handleButtonClick={this.handleButtonClick}
              steps={steps}
            />
          )
        };
      }
      return step;
    });

    return (
      <ChatBot
        ref={(ref) => (this.chatbot = ref)}
        steps={updatedSteps}
        floating={true}
        headerTitle="Support Bot"
        enableMobileAutoFocus={true}
      />
    );
  }
}

const SearchResult = (props) => {
  const { previousStep, handleButtonClick } = props;
  const keyword = previousStep.message.toLowerCase();

  const searchOptions = [
    { value: '1', label: 'What is your product?', trigger: 'product' },
    { value: '2', label: 'How do I get started?', trigger: 'gettingStarted' },
    { value: '3', label: 'How do I contact support?', trigger: 'contactSupport' }
  ];

  const searchResult = searchOptions.filter((option) =>
    option.label.toLowerCase().includes(keyword)
  );

  if (searchResult.length > 0) {
    return (
      <div>
        <p>Here are the matching results for your search:</p>
        <ul>
          {searchResult.map((result) => (
            <li key={result.value}>
              <button onClick={() => handleButtonClick(result.trigger)}>
                {result.label}
              </button>
            </li>
          ))}
        </ul>
      </div>
    );
  } else {
    return (
      <div>
        <p>No matching results found for your search.</p>
        <p>Please select an option:</p>
        <button onClick={() => handleButtonClick('search')}>Search Other Keyword</button>
        <button onClick={() => handleButtonClick('end')}>End Conversation</button>
      </div>
    );
  }
};

export default SupportBot;
